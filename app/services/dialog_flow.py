# Dialog_Flow
import datetime
import re
import types

from collections.abc import Iterable
from itertools import chain

from aiogram.types import BufferedInputFile
from loguru import logger

from app.adapters.db_adapter import WeatherParser
from app.utils.utils import run_async, table_writer


class DialogFlow(object):
    """
    *********************************************************************
    The class Dialog-Flow
    *********************************************************************
    """

    command_dict = {
        "flow_start": {
            "description": "–°—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é",
            "list": ["start", "—Å—Ç–∞—Ä—Ç", "–ø—Ä–∏–≤–µ—Ç"],
        },
        "flow_help": {
            "description": "–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ (–ø–æ–º–æ—â—å)",
            "list": ["help", "h", "?", "–ø–æ–º–æ—â—å", "—Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥"],
            "img": "‚Ñπ",
        },
        "flow_main_menu": {
            "description": "–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é (—Ä–∞–∑–¥–µ–ª—ã –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏)",
            "list": ["–º–µ–Ω—é", "–æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é", "main menu", "menu"],
            "img": "üîù",
        },
        "flow_user_get": {
            "description": "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–±–æ –º–Ω–µ",
            "list": ["–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–±–æ –º–Ω–µ"],
            "img": "‚ÑπÔ∏è",
        },
        "flow_weather_menu": {
            "description": "–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã",
            "list": ["–ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã"],
            "img": "üå¶",
        },
        "flow_weather_get": {
            "description": "–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –≤ Excel",
            "list": ["–ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –≤ excel"],
            "img": "üßæ",
        },
        "flow_log_get": {
            "description": "–õ–æ–≥–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã",
            "list": ["–ª–æ–≥–∏", "–ª–æ–≥", "–ª–æ–≥ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤", "–∏—Å—Ç–æ—Ä–∏—è"],
            "img": "üìÑ",
        },
        "flow_city_get": {
            "description": "–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –≥–æ—Ä–æ–¥–æ–≤",
            "list": ["–≥–æ—Ä–æ–¥–∞", "—Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –≥–æ—Ä–æ–¥–æ–≤"],
            "img": "üåá",
        },
        "flow_city_enter": {
            "description": "–í–≤–µ—Å—Ç–∏ –≥–æ—Ä–æ–¥ –≤—Ä—É—á–Ω—É—é",
            "list": ["–≤–≤–µ—Å—Ç–∏ –≥–æ—Ä–æ–¥ –≤—Ä—É—á–Ω—É—é"],
            "img": "",
        },
        "flow_exit": {
            "description": "–í—ã—Ö–æ–¥",
            "list": ["–≤—ã–π—Ç–∏", "–≤—ã—Ö–æ–¥", "–∑–∞–≤–µ—Ä—à–∏—Ç—å", "–∑–∞–∫–æ–Ω—á–∏—Ç—å", "–∫–æ–Ω–µ—Ü", "–æ—Ç–º–µ–Ω–∞",
                     "finish", "close", "end", "exit", "stop"],
            "img": "üîö",
        },
    }

    command_exit = command_dict["flow_exit"]["list"]
    button_default = ["–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é", "–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã" , "–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥"]

    def __init__(self, weather_parser: WeatherParser):
        self.weather_parser = weather_parser
        self.command_list = list(chain.from_iterable([el["list"] for el in self.command_dict.values()])) + list(
            self.command_dict)

    def add_img_in_command(self, command: str) -> str:
        img = ""
        for key, value in self.command_dict.items():
            if command.lower() in value["list"] + [key]:
                try:
                    img = value["img"] + " "
                except:
                    pass
                break
        return img + command

    def get_command_from_str(self, arg_str: str) -> tuple:
        def _is_command_in_dict(command: str) -> bool:
            for key, value in self.command_dict.items():
                if command in list(map(str.lower, (value["list"] + [key]))):
                    return True
            return False

        # remove the img from the content
        img_list = [self.command_dict[el]["img"] for el in self.command_dict if "img" in self.command_dict[el]]
        command = re.sub(r"|".join(map(re.escape, ["/"] + img_list)), "", arg_str.lower()).strip()

        if _is_command_in_dict(command):
            return command, None

        if len(command.split(" ")) < 2:
            return None, None

        # finding the index of last space
        index = command.rfind(" ")
        command, param = command[:index], command[index + 1:]
        return (command, param) if _is_command_in_dict(command) else (None, None)

    def dialog_flow(self, function_or_generator=None, chat_id=None, username='', text='', param: str = None):
        if self.is_command_dialog_flow(text):  # –û—Ç–≤–µ—Ç —è–≤–ª—è–µ—Ç—Å—è –∫–æ–º–∞–Ω–¥–æ–π
            # –≤—ã–±–µ—Ä–µ–º –∏ –∑–∞–ø—É—Å—Ç–∏–º –ª–æ–∫–∞–ª—å–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
            function_or_generator = self.get_dialog_flow(text, chat_id=chat_id, username=username, param=param)
            answer = next(function_or_generator)  # –≤ –ø–µ—Ä–≤—ã–π —Ä–∞–∑ - next (.send() —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ yield)
        else:
            if isinstance(function_or_generator, types.GeneratorType):  # –µ—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è - –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä
                try:
                    answer = function_or_generator.send(HTML(text))  # –∑–∞–ø—Ä–æ—Å –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π DialogFlow
                except StopIteration:  # –µ—Å–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∑–∞–∫–æ–Ω—á–∏–ª—Å—è, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—â–µ–Ω–∏–µ —Å DEFAULT
                    # function_or_generator = globals()['flow_default'](chat_id, username)
                    function_or_generator = self.__getattribute__("flow_default")(chat_id, username)
                    answer = next(
                        function_or_generator)  # –≤ –ø–µ—Ä–≤—ã–π —Ä–∞–∑ - next (.send() —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ yield)
                    # answer = ask_google_dialog_flow(text, chat_id)  # –∑–∞–ø—Ä–æ—Å –≤ Google DialogFlow
            else:
                # function_or_generator = globals()['flow_default'](chat_id, username)
                function_or_generator = self.__getattribute__("flow_default")(chat_id, username)
                answer = next(
                    function_or_generator)  # –≤ –ø–µ—Ä–≤—ã–π —Ä–∞–∑ - next (.send() —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ yield)
                # answer = ask_google_dialog_flow(text, chat_id)  # –∑–∞–ø—Ä–æ—Å –≤ Google DialogFlow
        return answer, function_or_generator

    '''
    *********************************************************************
     –ë–ª–æ–∫ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞ DialogFlow –ø–æ —Å–ø–µ—Ü-–∫–æ–º–∞–Ω–¥–∞–º
    *********************************************************************
    '''

    def is_command_dialog_flow(self, arg_str: str) -> bool:
        command, param = self.get_command_from_str(arg_str)
        return command in self.command_list

    def get_dialog_flow(self, arg_str: str, chat_id=None, username=None, param: str = None):
        command, param_ = self.get_command_from_str(arg_str)
        for key, value in self.command_dict.items():
            if command in value["list"] + [key]:
                return self.__getattribute__(key)(chat_id, username, param=(param or param_))
                # return globals()[key](chat_id, username)
        return None

    def flow_start(self, chat_id=None, username=None, *args, **kwargs):
        """
        *********************************************************************
         DialogFlow —Å—Ç–∞—Ä—Ç–æ–≤—ã–π, –¥–ª—è ...
        *********************************************************************
        """
        try:
            with open("app/static/megafon_logo.png", "rb") as in_file:  # opening for [r]eading as [b]inary
                logo = in_file.read()
        except:
            logo = None

        answer = yield (
            Photo(logo) if logo else None,
            HTML(f"–ü—Ä–∏–≤–µ—Ç <b>{username}</b>, —è - <b>–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã Yandex Bot</b>:)\n"
                 "–í–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –≤ –ø–æ–≥–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.\n–ë—É–¥–µ–º –∑–Ω–∞–∫–æ–º—ã.\n–ö–∞–∫ –ª—É—á—à–µ –∫ —Ç–µ–±–µ –æ–±—Ä–∞—â–∞—Ç—å—Å—è?\n"),
            [username]
        )
        # —É–±–∏—Ä–∞–µ–º –≤–µ–¥—É—â–∏–µ –∑–Ω–∞–∫–∏ –ø—É–Ω–∫—Ç—É–∞—Ü–∏–∏, –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ
        # –ø–µ—Ä–≤—É—é –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—É –∏–º–µ–Ω–∏, –ø–∏—à–µ–º –µ—ë —Å –∑–∞–≥–ª–∞–≤–Ω–æ–π –±—É–∫–≤—ã
        try:
            username = answer.text.rstrip(".!").capitalize()
            result = run_async(self.weather_parser.user_add, self.weather_parser, chat_id, username)
        except:
            pass

        answer = yield "–û—Ç–ª–∏—á–Ω–æ!", self.button_default
        return answer

    def flow_default(self, chat_id=None, username=None, *args, **kwargs):
        """
        *********************************************************************
         DialogFlow "by default"
        *********************************************************************
        """
        answer, choice = yield from self.ask_list_answer(HTML(f"<b>{username}</b>, —Å–¥–µ–ª–∞–π—Ç–µ –≤—ã–±–æ—Ä:"),
                                                         self.button_default)
        return answer

    def flow_exit(self, chat_id=None, username=None, *args, **kwargs):
        """
        *********************************************************************
         DialogFlow "exit"
        *********************************************************************
        """
        return self.flow_default(chat_id, username, *args, **kwargs)

    def flow_help(self, chat_id=None, username=None, *args, **kwargs):
        """
        *********************************************************************
         Dialog Flow to display a list of commands
        *********************************************************************
        """
        answer = ""
        for el in self.command_dict.values():
            answer += f"\n<b>{el['list'][0]}</b> - {el['description']}\n<i>{el['list'][1:]}</i>"
        answer = yield HTML(f"–ü–µ—Ä–µ—á–µ–Ω—å <b>–∫–æ–º–∞–Ω–¥</b>:\n{answer}"), self.button_default
        return answer

    def flow_main_menu(self, chat_id=None, username=None, *args, **kwargs):
        """
        *********************************************************************
         Dialog Flow for main Menu
        *********************************************************************
        """
        main_menu = ["–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã", "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–±–æ –º–Ω–µ", "–õ–æ–≥ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"]
        answer = ""
        while not answer or answer.text.lower() in self.command_list:
            answer = yield HTML(f"–ü—Ä–æ—Å—å–±–∞ –≤—ã–±—Ä–∞—Ç—å <b>–¥–µ–π—Å—Ç–≤–∏–µ</b>:"), main_menu

        return answer

    def flow_user_get(self, chat_id=None, username=None, *args, **kwargs):
        """
        *********************************************************************
         Dialog Flow for getting User info
        *********************************************************************
        """
        content = run_async(self.weather_parser.user_get, self.weather_parser, chat_id)
        answer = yield HTML(str(content)), self.button_default
        return answer

    def flow_log_get(self, chat_id=None, username=None, *args, **kwargs):
        """
        *********************************************************************
         Dialog Flow for getting last logs
        *********************************************************************
        """
        content = run_async(self.weather_parser.log_get, self.weather_parser)
        answer = yield HTML(str(content)), self.button_default
        return answer

    def flow_weather_menu(self, chat_id=None, username=None, *args, **kwargs):
        """
        *********************************************************************
         Dialog Flow to ...
        *********************************************************************
        """
        result = run_async(self.weather_parser.user_city_get, chat_id)
        button = [["–í–≤–µ—Å—Ç–∏ –≥–æ—Ä–æ–¥ (–ø–µ—Ä–≤—ã–µ –±—É–∫–≤—ã) –≤—Ä—É—á–Ω—É—é", "flow_city_enter"], ["–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é", "–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é"]]
        if result is None:
            content = "–í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–æ –≥–æ—Ä–æ–¥–∞–º –ø—É—Å—Ç–∞"
        else:
            content = "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:"
            button += [[el['name_ru'].capitalize(), f"flow_weather_get {el['name_en']}"] for el in result]

        answer = yield HTML(content), button
        return answer

    def flow_city_enter(self, chat_id=None, username=None, *args, **kwargs):
        """
        *********************************************************************
         Dialog Flow for getting City name from chat
        *********************************************************************
        """
        answer = ""
        while not answer:
            answer = yield HTML(f"–ü—Ä–æ—Å—å–±–∞ –≤–≤–µ—Å—Ç–∏ <b>–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞</b> <i>(–Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã—Ö –±—É–∫–≤)</i>, "
                                f"–∏–ª–∏ –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É <b>–í–´–ô–¢–ò</b>:"), ["–í—ã–π—Ç–∏"]
            if answer.text.lower() in self.command_exit:
                return answer
            result = run_async(self.weather_parser.city_get, self.weather_parser, answer.text)
            if not result:
                answer = yield HTML(f"–ì–æ—Ä–æ–¥–∞, –≤–∫–ª—é—á–∞—é—â–µ–≥–æ `{answer.text}` –≤ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–µ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ..."), ["–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é"]

        # if len(result) == 1:
        #     answer = yield self.flow_weather_get(chat_id, param=result[0]["name_en"])
        # else:
        button = [["–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é", "–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é"]] + [[el['name_ru'].capitalize(), f"flow_weather_get {el['name_en']}"] for el in result]
        answer = yield HTML("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:"), button
        return answer

    def flow_weather_get(self, chat_id=None, username=None, *args, **kwargs):
        city = kwargs['param']
        result = run_async(self.weather_parser.weather_get, self.weather_parser, chat_id, city)
        if result["is_error"]:
            answer = yield HTML(result["message"]), self.button_default
        else:
            stream = table_writer(dataframes={f"{city}": result["result_df"]}, param="xlsx")
            answer = yield File(stream.getvalue(), f"{datetime.date.today()}_{city}.xlsx"), self.button_default
        return answer

    def flow_city_get(self, chat_id=None, username=None, *args, **kwargs):
        """
        *********************************************************************
         Dialog Flow for getting City from spr
        *********************************************************************
        """
        result = run_async(self.weather_parser.city_get, self.weather_parser)
        if result is None:
            content = "–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –≥–æ—Ä–æ–¥–æ–≤ –ø—É—Å—Ç"
            button = self.button_default
        else:
            content = "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:"
            button = [[el['name_ru'], f"flow_weather_get {el['name_en']}"] for el in result]
            button.append(["–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é", "–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é"])

        answer = yield HTML(content), button
        return answer

    '''
    *********************************************************************
    –ë–ª–æ–∫ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤-–æ—Ç–≤–µ—Ç–æ–≤
    *********************************************************************
    '''

    @staticmethod
    def ask_yes_or_no(question):
        """–°–ø—Ä–æ—Å–∏—Ç—å –≤–æ–ø—Ä–æ—Å –∏ –¥–æ–∂–¥–∞—Ç—å—Å—è –æ—Ç–≤–µ—Ç–∞, —Å–æ–¥–µ—Ä–∂–∞—â–µ–≥–æ ¬´–¥–∞¬ª –∏–ª–∏ ¬´–Ω–µ—Ç¬ª.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
            bool
        """
        try:
            # return ask_list_answer(question)
            answer = yield (question, ["–î–∞ ‚úÖ", "–ù–µ—Ç ‚ùå"])
            logger.info(f"answer={answer}")
            while not ("–¥–∞" in answer.text.lower() or "–Ω–µ—Ç" in answer.text.lower()):
                answer = yield HTML("–¢–∞–∫ <b>–¥–∞</b> –∏–ª–∏ <b>–Ω–µ—Ç</b>?")
                logger.info(f"answer2={answer}")
                # answer_ = answer.text.lower() if answer else ""
            return "–¥–∞" in answer.text.lower()
        except:
            return False

    def ask_list_answer(self, question, list_answer, photo_obj=None):
        """–°–ø—Ä–æ—Å–∏—Ç—å –≤–æ–ø—Ä–æ—Å –∏ –¥–æ–∂–¥–∞—Ç—å—Å—è –æ—Ç–≤–µ—Ç, –∏–∑ —Å–ø–∏—Å–∫–∞ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
            number
        """
        if photo_obj:  # –ï—Å—Ç—å —Ñ–æ—Ç–æ - –ø–æ—Å—Ç–∞–≤–∏–º –ø–µ—Ä–≤—ã–º
            answer = yield (photo_obj, question, list_answer)
        else:
            answer = yield (question, list_answer)
        list_answer = list(self.flatten_lower(list_answer))  # –∏–∑–±–∞–≤–∏–º—Å—è –æ—Ç –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏ –≤ –º–∞—Å—Å–∏–≤–µ –∏ –ø–µ—Ä–µ–≤–µ–¥–µ–º –≤ lower
        while not (answer.text.lower() in list_answer):
            answer = yield HTML("–ü—Ä–æ—à—É –≤–≤–µ—Å—Ç–∏ –≤–∞—Ä–∏–∞–Ω—Ç –∏–ª–∏ –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É?")
        return answer.text, list_answer.index(answer.text.lower())

    @staticmethod
    def ask_list_answer1(question, list_yes=['–¥–∞', '–æ–∫', 'yes', 'ok'], list_no=['–Ω–µ—Ç', 'not']):
        """–°–ø—Ä–æ—Å–∏—Ç—å –≤–æ–ø—Ä–æ—Å –∏ –¥–æ–∂–¥–∞—Ç—å—Å—è –æ—Ç–≤–µ—Ç–∞, —Å–æ–¥–µ—Ä–∂–∞—â–µ–≥–æc—è –≤ —Å–ø–∏—Å–∫–µ list_yes –∏–ª–∏ list_no

        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
            bool
        """
        answer = yield question
        while not (answer.text.lower() in list_yes or answer.text.lower() in list_no):
            answer = yield HTML(
                "–¢–∞–∫ –≤—Å–µ-–∂–µ, –≤—ã–±–µ—Ä–µ—Ç–µ?\n(<b>" + ', '.join(list_yes) + "</b>)\n–∏–ª–∏\n(<b>" + ', '.join(list_no) + "</b>)")
        return answer.text.lower() in list_yes

    def flatten_lower(self, list):
        """ –§—É–Ω–∫—Ü–∏—è —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ª—é–±–æ–π –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏ —Å –ø–µ—Ä–µ–≤–æ–¥–æ–º —Ç–µ–∫—Å—Ç–∞ –≤ –Ω–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä """
        for item in list:
            if isinstance(item, Iterable) and not isinstance(item, str):
                for x in self.flatten_lower(item):
                    yield x
            else:
                yield item.lower()

    @staticmethod
    def get_chart_path(string):
        """
        –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π URL-–ø—É—Ç—å –∫ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞–º –¥–∏–∞–≥—Ä–∞–º
        chart/product1.jpg --> /media/chart/product1.jpg
        –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å—Å—ã–ª–∫–æ–π –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ http:// https:// –∏ —Ç.–¥.
        """
        if not string:
            string = 'chart/default.jpg'
            # string = 'media/chart/cat_avatar.jpg'
        elif string.name.find(':') != -1:
            return string

        return f'MEDIA_URL{string}'
        # return f'{MEDIA_URL}{string}'


# –ö–ª–∞—Å—Å –¥–ª—è —Ç–µ–∫—Å—Ç–∞ –±–µ–∑ "—É–∫—Ä–∞—à–∞—Ç–µ–ª—å—Å—Ç–≤"
class Message(object):
    def __init__(self, text, **options):
        self.text = text
        self.options = options


# –ö–ª–∞—Å—Å –¥–ª—è —Ç–µ–∫—Å—Ç–∞ –≤ HTML-—Ñ–æ—Ä–º–∞—Ç–µ
class HTML(Message):
    def __init__(self, text, **options):
        super(HTML, self).__init__(text, parse_mode="HTML", **options)


# –ö–ª–∞—Å—Å –¥–ª—è –∫–∞—Ä—Ç–∏–Ω–æ–∫
class Photo(object):
    def __init__(self, image: bytes = None, content: str = None, **options):
        self.image = BufferedInputFile(image, "test.png") if image else None
        self.content = content


# –ö–ª–∞—Å—Å –¥–ª—è —Ñ–∞–π–ª–æ–≤
class File(object):
    def __init__(self, file: bytes = None, file_name: str = "file_name.txt", content: str = None, **options):
        self.file = BufferedInputFile(file, file_name) if file else None
        self.content = content


class CommandToBack(object):
    def __init__(self, chat_id: int, command: str, content: str = None):
        self.chat_id = chat_id
        self.command = command
        self.content = content


class CommandToTelegram(object):
    def __init__(self, command: str, content: str = None):
        self.command = command
        self.content = content
